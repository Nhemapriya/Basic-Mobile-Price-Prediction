# -*- coding: utf-8 -*-
"""TF_IMPLEMENTATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12aTBPDxlqeKuSFCAG2lbHDvx4OcjTRP1
"""

!git clone https://github.com/tensorflow/models.git
!apt-get -qq install libprotobuf-java protobuf-compiler
!protoc ./models/research/object_detection/protos/string_int_label_map.proto --python_out=.
!cp -R models/research/object_detection/ object_detection/
!rm -rf models
!pip install --upgrade youtube-dl

from google.colab import drive

drive.mount('/content/drive')

import os
# os.mkdir('model_images1')


# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/dog.jpg" "images1/dog.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/horses.jpg" "images1/horses.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/person.jpg" "images1/person.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/beach.jpg" "images1/beach.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/two_dogs.jpg" "images1/two_dogs.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/ellen.jpg" "images1/ellen.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/selfie.jpg" "images1/selfie.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/car1.jpg" "images1/car1.jpg"
# !cp "/content/drive/My Drive/Colab Notebooks/yolo(1)/car2.jpg" "images1/car2.jpg"




!cp "/content/drive/MyDrive/Colab Notebooks/yolo (1)/car1.jpg" "model_images1/car1.jpg"
!cp "/content/drive/MyDrive/Colab Notebooks/yolo (1)/car2.jpg" "model_images1/car2.jpg"
!cp "/content/drive/MyDrive/Colab Notebooks/yolo (1)/car3.jpg" "model_images1/car3.jpg"
!cp "/content/drive/MyDrive/Colab Notebooks/yolo (1)/car4.jpg" "model_images1/car4.jpg"
!cp "/content/drive/MyDrive/Colab Notebooks/yolo (1)/dog.jpg" "model_images1/dog.jpg"

!pip install tf_slim

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import os
from moviepy.editor import VideoFileClip
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile
import time
import youtube_dl
from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from object_detection.utils import ops as utils_ops

from PIL import Image

from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

# %matplotlib inline

# SSD_MOBILENET_MODEL_NAME = 'ssd_mobilenet_v2_coco_2018_03_29'

SSD_INCEPTION_MODEL_NAME = 'ssd_inception_v2_coco_2018_01_28'

FASTER_RCNN_INCEPTION_MODEL_NAME = 'faster_rcnn_inception_v2_coco_2018_01_28'

 FASTER_RCNN_RESNET_AND_INCEPTION_MODEL_NAME = 'faster_rcnn_inception_resnet_v2_atrous_coco_2018_01_28'

FASTER_RCNN_RESNET101_MODEL_NAME = 'faster_rcnn_resnet101_kitti_2018_01_28'

# FASTER_RCNN_NAS_MODEL_NAME = 'faster_rcnn_nas_coco_2018_01_28'

MASK_RCNN_RESNET101_MODEL_NAME = 'mask_rcnn_resnet101_atrous_coco_2018_01_28'

PATH_TO_TEST_IMAGES_DIR = 'model_images1/'
TEST_IMAGES = os.listdir(PATH_TO_TEST_IMAGES_DIR)
TEST_IMAGE_PATHS = [PATH_TO_TEST_IMAGES_DIR + x  for x in TEST_IMAGES]
print (TEST_IMAGE_PATHS)

# Size, in inches, of the output images.
IMAGE_SIZE = (8, 8)

PATH_TO_LABELS = os.path.join('object_detection/data', 'mscoco_label_map.pbtxt')
NUM_CLASSES = 90

label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

def prepare_model(MODEL_NAME):
    MODEL_FILE = MODEL_NAME + '.tar.gz'
    DOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'

    # Path to frozen detection graph. This is the actual model that is used for the object detection.
    PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'

    opener = urllib.request.URLopener()
    opener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)
    tar_file = tarfile.open(MODEL_FILE)
    for file in tar_file.getmembers():
      file_name = os.path.basename(file.name)
      if 'frozen_inference_graph.pb' in file_name:
        tar_file.extract(file, os.getcwd())

    detection_graph = tf.Graph()
    with detection_graph.as_default():
      # od_graph_def = tf.GraphDef()
      od_graph_def = tf.compat.v1.GraphDef() 
      # with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
      with tf.compat.v2.io.gfile.GFile(PATH_TO_CKPT, 'rb') as fid: 
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

    return detection_graph


def load_image_into_numpy_array(image):
    (im_width, im_height) = image.size
    return np.array(image.getdata()).reshape(
        (im_height, im_width, 3)).astype(np.uint8)

def inference_and_plot(detection_graph):
    with detection_graph.as_default():
      with tf.compat.v1.Session(graph=detection_graph) as sess:
        
        # Definite input and output Tensors for detection_graph
        image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
        # Each box represents a part of the image where a particular object was detected.
        detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
        # Each score represent how level of confidence for each of the objects.
        # Score is shown on the result image, together with the class label.
        detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
        detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')
        num_detections = detection_graph.get_tensor_by_name('num_detections:0')
        
        for image_path in TEST_IMAGE_PATHS:
            
            start_time = time.time()
            image = Image.open(image_path)
            # the array based representation of the image will be used later in order to prepare the
            # result image with boxes and labels on it.
            image_np = load_image_into_numpy_array(image)
            # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
            image_np_expanded = np.expand_dims(image_np, axis=0)
            
            # Actual detection.
            (boxes, scores, classes, num) = sess.run(
                [detection_boxes, detection_scores, detection_classes, num_detections],
                feed_dict={image_tensor: image_np_expanded})
            end_time = time.time()
            
            # Visualization of the results of a detection.
            vis_util.visualize_boxes_and_labels_on_image_array(
                image_np,
                np.squeeze(boxes),
                np.squeeze(classes).astype(np.int32),
                np.squeeze(scores),
                category_index,
                use_normalized_coordinates=True,
                line_thickness=3)
            
            plt.figure(figsize=IMAGE_SIZE)
            plt.grid(visible=False)
            plt.xticks([])
            plt.yticks([])
            plt.imshow(image_np)
            plt.show()
            
            print ('Time taken: ', (end_time-start_time))

"""# SSD INCEPTION MODEL"""

print ('Model name:', SSD_INCEPTION_MODEL_NAME)
detection_graph = prepare_model(SSD_INCEPTION_MODEL_NAME)
inference_and_plot(detection_graph)

"""# FAST RCNN MODEL"""

print ('Model name:', FASTER_RCNN_INCEPTION_MODEL_NAME)
detection_graph = prepare_model(FASTER_RCNN_INCEPTION_MODEL_NAME)
inference_and_plot(detection_graph)

"""# RCNN - RESNET"""

print ('Model name:', FASTER_RCNN_RESNET_AND_INCEPTION_MODEL_NAME)
detection_graph = prepare_model(FASTER_RCNN_RESNET_AND_INCEPTION_MODEL_NAME)
inference_and_plot(detection_graph)

"""# Mask RCNN - Resnet"""

print ('Model name:', MASK_RCNN_RESNET101_MODEL_NAME)
detection_graph = prepare_model(MASK_RCNN_RESNET101_MODEL_NAME)
inference_and_plot(detection_graph)

"""# Video detection"""

def YouTube_download(url):
  ydl_opts = {
      'outtmpl': 'yt-video.%(ext)s'
  }
  with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download([url])

YouTube_download("https://www.youtube.com/watch?v=bAhprdemJKE")

def preprocess_image(image_np, sess, detection_graph):
  
    with detection_graph.as_default():
        
        ops = tf.compat.v1.get_default_graph().get_operations()
        all_tensor_names = {output.name for op in ops for output in op.outputs}
        tensor_dict = {}
        for key in [
              'num_detections', 'detection_boxes', 'detection_scores',
              'detection_classes', 'detection_masks'
          ]:
            tensor_name = key + ':0'
            if tensor_name in all_tensor_names:
                tensor_dict[key] = tf.compat.v1.get_default_graph().get_tensor_by_name(tensor_name)
                
        if 'detection_masks' in tensor_dict:
            # The following processing is only for single image
            detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
            detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])
            # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.
            real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
            detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
            detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
            detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
                detection_masks, detection_boxes, image_np.shape[0], image_np.shape[1])
            detection_masks_reframed = tf.cast(
                tf.greater(detection_masks_reframed, 0.5), tf.uint8)
            # Follow the convention by adding back the batch dimension
            tensor_dict['detection_masks'] = tf.expand_dims(
                detection_masks_reframed, 0)
        image_tensor = tf.compat.v1.get_default_graph().get_tensor_by_name('image_tensor:0')

      # Run inference
        output_dict = sess.run(tensor_dict,
                             feed_dict={image_tensor: np.expand_dims(image_np, 0)})

      # all outputs are float32 numpy arrays, so convert types as appropriate
        output_dict['num_detections'] = int(output_dict['num_detections'][0])
        output_dict['detection_classes'] = output_dict['detection_classes'][0].astype(np.uint8)
        output_dict['detection_boxes'] = output_dict['detection_boxes'][0]
        output_dict['detection_scores'] = output_dict['detection_scores'][0]
        if 'detection_masks' in output_dict:
            output_dict['detection_masks'] = output_dict['detection_masks'][0]
            
        vis_util.visualize_boxes_and_labels_on_image_array(
          image_np,
          output_dict['detection_boxes'],
          output_dict['detection_classes'],
          output_dict['detection_scores'],
          category_index,
          instance_masks=output_dict.get('detection_masks'),
          use_normalized_coordinates=True,
          line_thickness=1)
        
        return image_np

def process_image(image): 
  
    global counter  
    if counter%1 ==0:
   
        with detection_graph.as_default():
            with tf.compat.v1.Session(graph=detection_graph) as sess:
                image_np = preprocess_image(image, sess, detection_graph) 

    counter +=1    
    return image

# Commented out IPython magic to ensure Python compatibility.
from tensorflow.keras.models import Sequential
filename = '/content/test3_licenseplate.mp4'
new_loc = 'out.mp4'

counter = 0

detection_graph = prepare_model(MASK_RCNN_RESNET101_MODEL_NAME)
clip1 = VideoFileClip(filename)
white_clip = clip1.fl_image(process_image) #NOTE: this function expects color images!!s
# %time white_clip.write_videofile(new_loc, audio=False)

"""# FAST AI IMPLEMENTATION - VOC DATASET"""

!wget https://pjreddie.com/media/files/VOCtrainval_06-Nov-2007.tar
#!wget https://pjreddie.com/media/files/VOCtest_06-Nov-2007.tar
!tar xf VOCtrainval_06-Nov-2007.tar
#!tar xf VOCtest_06-Nov-2007.tar

! wget 'https://s3.amazonaws.com/images.cocodataset.org/external/external_PASCAL_VOC.zip'

! unzip 'external_PASCAL_VOC.zip'

# Commented out IPython magic to ensure Python compatibility.

from pathlib import Path
import pandas as pd
import numpy as np
import collections
import json
from PIL import ImageDraw, ImageFont, Image
from matplotlib import patches, patheffects
import matplotlib.pyplot as plt

# %matplotlib inline

IMG_PATH = Path('VOCdevkit/VOC2007/JPEGImages')

path = Path('PASCAL_VOC')
trn = json.load((path/'pascal_train2007.json').open())
trn.keys()

img, anno, cat = ['images', 'annotations', 'categories']
trn[img][:3], trn[anno][:3], trn[cat][:3]

file_name, ID, img_id, cat_id, bbox = 'file_name','id','image_id','category_id','bbox'

cats = dict((o[ID], o['name']) for o in trn[cat])
trn_fns = dict((o[ID], o[file_name]) for o in trn[img])
trn_ids = [o[ID] for o in trn[img]]

def get_trn_anno():
    trn_anno = collections.defaultdict(lambda:[])
    for o in trn[anno]:
        if not o['ignore']:
            bb = o[bbox]
            bb = np.array([bb[1], bb[0], bb[3]+bb[1]-1, bb[2]+bb[0]-1])
            trn_anno[o[img_id]].append((bb,o[cat_id]))
    return trn_anno

trn_anno = get_trn_anno()

def show_img(im, figsize=None, ax=None):
    if not ax: fig,ax = plt.subplots(figsize=figsize)
    ax.imshow(im)
    ax.set_xticks(np.linspace(0, 224, 8))
    ax.set_yticks(np.linspace(0, 224, 8))
    ax.grid()
    ax.set_yticklabels([])
    ax.set_xticklabels([])
    return ax

def draw_outline(o, lw):
    o.set_path_effects([patheffects.Stroke(
        linewidth=lw, foreground='black'), patheffects.Normal()])

def draw_rect(ax, b, color='white'):
    patch = ax.add_patch(patches.Rectangle(b[:2], *b[-2:], fill=False, edgecolor=color, lw=2))
    draw_outline(patch, 4)

def draw_text(ax, xy, txt, sz=14, color='white'):
    text = ax.text(*xy, txt,
        verticalalignment='top', color=color, fontsize=sz, weight='bold')
    draw_outline(text, 1)

def bb_hw(a): return np.array([a[1],a[0],a[3]-a[1]+1,a[2]-a[0]+1])

def draw_im(im, ann):
    ax = show_img(im, figsize=(16,8))
    for b,c in ann:
        b = bb_hw(b)
        draw_rect(ax, b)
        draw_text(ax, b[:2], cats[c], sz=16)

def draw_idx(i):
    im_a = trn_anno[i]
    im = Image.open(IMG_PATH/trn_fns[i])
    print (im.size)
    draw_im(im, im_a)

#draw_idx(32)


#draw_idx(42)

#draw_idx(33)



